{"version":3,"sources":["components/Square/Square.js","data/Questions.js","components/Board/Board.js","Game.js","reportWebVitals.js","index.js"],"names":["Square","props","useState","selected","setSelected","className","class","onClick","question","questions","Board","squares","shuffledQuestions","sort","Math","random","i","push","Game","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAqBeA,MAlBf,SAAgBC,GAAQ,IAAD,EACaC,oBAAS,GADtB,mBACZC,EADY,KACFC,EADE,KAQnB,OACI,qBACIC,UAAS,UAAKJ,EAAMK,MAAX,YAAoBH,EAAW,WAAa,IACrDI,QAAS,WAPGH,GAAZD,IAKJ,SAIKF,EAAMO,YChBNC,EAAY,CACrB,gBACA,qBACA,iBACA,mCACA,8BACA,oBACA,gCACA,2BACA,+BACA,yCACA,gCACA,0BACA,+BACA,qBACA,uCACA,iCACA,6CACA,6BACA,0BACA,4CACA,sCACA,6BACA,8BACA,qBACA,+BACA,0BACA,iCACA,gDACA,qCACA,+B,MCJWC,MAtBf,WAME,IALA,IAEMC,EAAU,GACZC,EAAoBH,EAAUI,MAAK,kBAAMC,KAAKC,SAAW,MAEpDC,EAAI,EAAGA,EALG,GAKaA,IAC9BL,EAAQM,KACN,cAAC,EAAD,CAEET,SARiB,KAQPQ,EAAuB,mBAAGX,UAAU,gBAAb,oBAA4CO,EAAkBI,GAC/FV,MATiB,KASVU,EAAuB,kBAAoB,UAF7CA,IAMX,OACE,qBAAKX,UAAU,QAAf,SACGM,KCJQO,MAdf,WACE,OACE,sBAAKb,UAAU,OAAf,UACE,sBAAKA,UAAU,SAAf,UACE,oBAAIA,UAAU,YAAd,6BACA,oBAAIA,UAAU,aAAd,uBAEF,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,UCCOc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dd528a96.chunk.js","sourcesContent":["import './Square.css';\nimport React, { useState } from 'react';\n\nfunction Square(props) {\n    const [selected, setSelected] = useState(false);\n\n    function toggleSquareSelect() {\n        if (selected) { setSelected(false) }\n        else { setSelected(true) }\n    }\n\n    return (\n        <div\n            className={`${props.class} ${selected ? \"selected\" : \"\"}`}\n            onClick={() => toggleSquareSelect()}\n        >\n            {props.question}\n        </div>\n    );\n}\n\nexport default Square;","export const questions = [\n    \"Have a tattoo\",\n    \"Drink coffee daily\",\n    \"Ran a marathon\",\n    \"Hosted an outrageous hosue party\",\n    \"Was Born in another country\",\n    \"have no allergies\",\n    \"Wear (or should wear) glasses\",\n    \"Have been stung by a bee\",\n    \"speak more than one language\",\n    \"Play (not played) a musical instrument\",\n    \"Have never changed a car tyre\",\n    \"have a driver's license\",\n    \"have Eaten snails (escargot)\",\n    \"have a pet or pets\",\n    \"Played four square in Primary School\",\n    \"will never jump out of a plane\",\n    \"had my first job at a fast food restaurant\",\n    \"Have herbs growing at home\",\n    \"Was in the school choir\",\n    \"Had an online delivery in the past 7 days\",\n    \"drink soft drink more than I should\",\n    \"loved Maths in High school\",\n    \"have never ordered Ubereats\",\n    \"watched Tiger King\",\n    \"started baking bread in 2020\",\n    \"started running in 2020\",\n    \"have had drinks on a Zoom chat\",\n    \"have had a few too many drinks on a Zoom chat\",\n    \"have visited more than 5 countries\",\n    \"have met a proper celebrity\",\n]\n\nexport default questions;","import Square from '../Square/Square.js';\nimport { questions } from '../../data/Questions.js';\nimport './Board.css';\n\nfunction Board() {\n  const sizeOfGrid = 25;\n  const centerPosition = 12;\n  const squares = [];\n  var shuffledQuestions = questions.sort(() => Math.random() - 0.5);\n\n  for (let i = 0; i < sizeOfGrid; i++) {\n    squares.push(\n      <Square\n        key={i}\n        question={i === centerPosition ? <p className=\"middle-square\">&#x2731;</p> : shuffledQuestions[i]}\n        class={i === centerPosition ? \"square selected\" : \"square\"}\n      />)\n  }\n\n  return (\n    <div className=\"board\">\n      {squares}\n    </div>\n  );\n}\n\nexport default Board;","import './Game.css';\nimport Board from './components/Board/Board.js';\n\nfunction Game() {\n  return (\n    <div className=\"game\">\n      <div className=\"titles\">\n        <h2 className=\"sub-title\">All about me...</h2>\n        <h1 className=\"main-title\">BINGO!</h1>\n      </div>\n      <div className=\"game-board\">\n        <Board />\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}